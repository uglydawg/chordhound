name: Deploy to Control Plane

on:
  push:
    branches:
      - main

env:
  REGISTRY: seanodea-5f382d.registry.cpln.io
  IMAGE_NAME: chordhound
  WORKLOAD_NAME: app
  CPLN_ORG: seanodea-5f382d
  CPLN_GVC: chordhound

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install Control Plane CLI
        run: |
          npm install -g @controlplane/cli
          cpln --version

      - name: Login to Control Plane
        run: |
          cpln profile create default \
            --token ${{ secrets.CPLN_TOKEN }} \
            --org ${{ env.CPLN_ORG }} \
            --gvc ${{ env.CPLN_GVC }}
          cpln profile set-default default

      - name: Login to Control Plane Registry
        run: |
          cpln image docker-login --org ${{ env.CPLN_ORG }}

      - name: Generate Image Tag
        id: image-tag
        run: |
          TIMESTAMP=$(date +%Y%m%d.%H%M%S)
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          IMAGE_TAG="${TIMESTAMP}-${SHORT_SHA}"
          echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "full_image=${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.image-tag.outputs.full_image }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to Control Plane
        run: |
          # Check if workload exists, create if not
          if ! cpln workload get ${WORKLOAD_NAME} --gvc ${CPLN_GVC} > /dev/null 2>&1; then
            echo "⚠️  Workload ${WORKLOAD_NAME} does not exist, creating from template..."

            # Ensure identity exists
            if ! cpln identity get ${WORKLOAD_NAME} --gvc ${CPLN_GVC} > /dev/null 2>&1; then
              echo "Creating identity for ${WORKLOAD_NAME}..."
              cpln identity create --name ${WORKLOAD_NAME} \
                --gvc ${CPLN_GVC} \
                --description "Identity for ${WORKLOAD_NAME} workload"
            fi

            # Create workload from definition file
            cpln apply -f cpln/chordhound/app.yaml \
              --gvc ${CPLN_GVC}
          fi

          # Update the workload with the new image
          cpln workload update ${WORKLOAD_NAME} \
            --set spec.containers.app.image=${{ steps.image-tag.outputs.full_image }} \
            --gvc ${CPLN_GVC}

          echo "✅ Deployed to Control Plane"
          echo "Image: ${{ steps.image-tag.outputs.full_image }}"

      - name: Wait for Deployment
        run: |
          echo "Waiting for deployment to stabilize..."
          sleep 30

          # Get deployment status
          cpln workload get ${WORKLOAD_NAME} --gvc ${CPLN_GVC} -o json | \
            jq -r '.status | "Ready: \(.ready), Endpoint: \(.endpoint)"'

      - name: Deployment Summary
        run: |
          echo "### Deployment Complete 🚀" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**GVC:** ${CPLN_GVC}" >> $GITHUB_STEP_SUMMARY
          echo "**Workload:** ${WORKLOAD_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ steps.image-tag.outputs.full_image }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
