FROM ubuntu:24.04

LABEL maintainer="Taylor Otwell"

ARG WWWGROUP
ARG NODE_VERSION=22
ARG MYSQL_CLIENT="mysql-client"
ARG POSTGRES_VERSION=17

WORKDIR /var/www/html

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=UTC

RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

RUN echo "Acquire::http::Pipeline-Depth 0;" > /etc/apt/apt.conf.d/99custom && \
    echo "Acquire::http::No-Cache true;" >> /etc/apt/apt.conf.d/99custom && \
    echo "Acquire::BrokenProxy    true;" >> /etc/apt/apt.conf.d/99custom

RUN apt-get update && apt-get upgrade -y \
    && mkdir -p /etc/apt/keyrings \
    && apt-get install -y gnupg gosu curl ca-certificates zip unzip git supervisor sqlite3 libcap2-bin libpng-dev python3 dnsutils librsvg2-bin fswatch ffmpeg nano nginx \
    && curl -sS 'https://keyserver.ubuntu.com/pks/lookup?op=get&search=0xb8dc7e53946656efbce4c1dd71daeaab4ad4cab6' | gpg --dearmor | tee /etc/apt/keyrings/ppa_ondrej_php.gpg > /dev/null \
    && echo "deb [signed-by=/etc/apt/keyrings/ppa_ondrej_php.gpg] https://ppa.launchpadcontent.net/ondrej/php/ubuntu noble main" > /etc/apt/sources.list.d/ppa_ondrej_php.list \
    && apt-get update \
    && apt-get install -y php8.4-cli php8.4-dev php8.4-fpm \
    php8.4-pgsql php8.4-sqlite3 php8.4-gd \
    php8.4-curl php8.4-mongodb \
    php8.4-imap php8.4-mysql php8.4-mbstring \
    php8.4-xml php8.4-zip php8.4-bcmath php8.4-soap \
    php8.4-intl php8.4-readline \
    php8.4-ldap \
    php8.4-msgpack php8.4-igbinary php8.4-redis php8.4-swoole \
    php8.4-memcached php8.4-pcov php8.4-imagick php8.4-xdebug \
    && curl -sLS https://getcomposer.org/installer | php -- --install-dir=/usr/bin/ --filename=composer \
    && curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg \
    && echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_VERSION.x nodistro main" > /etc/apt/sources.list.d/nodesource.list \
    && apt-get update \
    && apt-get install -y nodejs \
    && npm install -g npm \
    && npm install -g pnpm \
    && npm install -g bun \
    && curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --dearmor | tee /etc/apt/keyrings/yarn.gpg >/dev/null \
    && echo "deb [signed-by=/etc/apt/keyrings/yarn.gpg] https://dl.yarnpkg.com/debian/ stable main" > /etc/apt/sources.list.d/yarn.list \
    && curl -sS https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor | tee /etc/apt/keyrings/pgdg.gpg >/dev/null \
    && echo "deb [signed-by=/etc/apt/keyrings/pgdg.gpg] http://apt.postgresql.org/pub/repos/apt noble-pgdg main" > /etc/apt/sources.list.d/pgdg.list \
    && apt-get update \
    && apt-get install -y yarn \
    && apt-get install -y $MYSQL_CLIENT \
    && apt-get install -y postgresql-client-$POSTGRES_VERSION \
    && apt-get -y autoremove \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

RUN curl -L https://github.com/stripe/stripe-cli/releases/download/v1.27.0/stripe_1.27.0_linux_x86_64.tar.gz -o stripe.tar.gz \
    && tar -xzf stripe.tar.gz \
    && mv stripe /usr/local/bin/stripe \
    && rm stripe.tar.gz

RUN setcap "cap_net_bind_service=+ep" /usr/bin/php8.4

RUN userdel -r ubuntu
RUN groupadd --force -g 1000 sail
RUN useradd -ms /bin/bash --no-user-group -g 1000 -u 1000 sail

COPY start-container /usr/local/bin/start-container
COPY supervisord.nginx.conf /etc/supervisor/conf.d/supervisord.conf
COPY php.ini /etc/php/8.4/cli/conf.d/99-sail.ini
COPY nginx.conf /etc/nginx/nginx.conf
RUN chmod +x /usr/local/bin/start-container

# Configure NGINX
RUN rm -f /etc/nginx/sites-enabled/default

# Create NGINX configuration for HTTP
RUN echo 'server {\n\
    listen 80;\n\
    server_name localhost;\n\
    root /var/www/html/public;\n\
    index index.php index.html;\n\
    \n\
    location / {\n\
    try_files $uri $uri/ /index.php?$query_string;\n\
    }\n\
    \n\
    location ~ \.php$ {\n\
    fastcgi_pass unix:/var/run/php/php8.4-fpm.sock;\n\
    fastcgi_index index.php;\n\
    fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;\n\
    include fastcgi_params;\n\
    }\n\
    \n\
    location ~ /\.ht {\n\
    deny all;\n\
    }\n\
    }' > /etc/nginx/sites-available/laravel

# Create NGINX configuration for HTTPS (localhost)
RUN echo 'server {\n\
    listen 443 ssl;\n\
    server_name localhost;\n\
    root /var/www/html/public;\n\
    index index.php index.html;\n\
    \n\
    ssl_certificate /etc/ssl/certs/custom/localhost-10yr.pem;\n\
    ssl_certificate_key /etc/ssl/certs/custom/localhost-10yr-key.pem;\n\
    \n\
    location / {\n\
    try_files $uri $uri/ /index.php?$query_string;\n\
    }\n\
    \n\
    location ~ \.php$ {\n\
    fastcgi_pass unix:/var/run/php/php8.4-fpm.sock;\n\
    fastcgi_index index.php;\n\
    fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;\n\
    include fastcgi_params;\n\
    }\n\
    \n\
    location ~ /\.ht {\n\
    deny all;\n\
    }\n\
    }' > /etc/nginx/sites-available/laravel-ssl

# Create NGINX configuration for *.test wildcard
RUN echo 'server {\n\
    listen 443 ssl;\n\
    server_name *.test;\n\
    root /var/www/html/public;\n\
    index index.php index.html;\n\
    \n\
    ssl_certificate /etc/ssl/certs/custom/localhost-10yr.pem;\n\
    ssl_certificate_key /etc/ssl/certs/custom/localhost-10yr-key.pem;\n\
    \n\
    location / {\n\
    try_files $uri $uri/ /index.php?$query_string;\n\
    }\n\
    \n\
    location ~ \.php$ {\n\
    fastcgi_pass unix:/var/run/php/php8.4-fpm.sock;\n\
    fastcgi_index index.php;\n\
    fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;\n\
    include fastcgi_params;\n\
    }\n\
    \n\
    location ~ /\.ht {\n\
    deny all;\n\
    }\n\
    }' > /etc/nginx/sites-available/test-ssl

# Create NGINX configuration for *.localtest.me wildcard
RUN echo 'server {\n\
    listen 443 ssl;\n\
    server_name *.localtest.me;\n\
    root /var/www/html/public;\n\
    index index.php index.html;\n\
    \n\
    ssl_certificate /etc/ssl/certs/custom/localhost-10yr.pem;\n\
    ssl_certificate_key /etc/ssl/certs/custom/localhost-10yr-key.pem;\n\
    \n\
    location / {\n\
    try_files $uri $uri/ /index.php?$query_string;\n\
    }\n\
    \n\
    location ~ \.php$ {\n\
    fastcgi_pass unix:/var/run/php/php8.4-fpm.sock;\n\
    fastcgi_index index.php;\n\
    fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;\n\
    include fastcgi_params;\n\
    }\n\
    \n\
    location ~ /\.ht {\n\
    deny all;\n\
    }\n\
    }' > /etc/nginx/sites-available/localtest-ssl

# Create NGINX configuration for *.cc.test wildcard
RUN echo 'server {\n\
    listen 443 ssl;\n\
    server_name *.cc.test;\n\
    root /var/www/html/public;\n\
    index index.php index.html;\n\
    \n\
    ssl_certificate /etc/ssl/certs/custom/localhost-10yr.pem;\n\
    ssl_certificate_key /etc/ssl/certs/custom/localhost-10yr-key.pem;\n\
    \n\
    location / {\n\
    try_files $uri $uri/ /index.php?$query_string;\n\
    }\n\
    \n\
    location ~ \.php$ {\n\
    fastcgi_pass unix:/var/run/php/php8.4-fpm.sock;\n\
    fastcgi_index index.php;\n\
    fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;\n\
    include fastcgi_params;\n\
    }\n\
    \n\
    location ~ /\.ht {\n\
    deny all;\n\
    }\n\
    }' > /etc/nginx/sites-available/cctest-ssl

# Sites will be enabled by start-container script based on what's available

# Configure PHP-FPM
RUN sed -i 's/user = www-data/user = sail/' /etc/php/8.4/fpm/pool.d/www.conf \
    && sed -i 's/group = www-data/group = sail/' /etc/php/8.4/fpm/pool.d/www.conf \
    && sed -i 's/listen.owner = www-data/listen.owner = www-data/' /etc/php/8.4/fpm/pool.d/www.conf \
    && sed -i 's/listen.group = www-data/listen.group = www-data/' /etc/php/8.4/fpm/pool.d/www.conf \
    && sed -i 's/listen.mode = 0660/listen.mode = 0666/' /etc/php/8.4/fpm/pool.d/www.conf

EXPOSE 80/tcp 443/tcp

ENTRYPOINT ["start-container"]